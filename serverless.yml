service: node-backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    USER_POOL_ID: !ImportValue UserPoolId
    USER_POOL_CLIENT_ID: !ImportValue UserPoolClientId
    # RAPID_API_ID: ${env:RAPID_API_ID}
    # RDS_NAME: school_of_code_db
    # RDS_HOST: ${env:RDS_HOST}
    # RDS_USER_NAME: school_of_code_user
    # RDS_PASSWORD: ${env:RDS_PASSWORD}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
functions:
  loginUser:
    handler: user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signupUser:
    handler: user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  newSubmission:
    handler: CodeCompiler/NewSubmission.handler
    events:
      - http:
          path: compile/submission
          method: post
          cors: true

  newCodeSubmission:
    handler: CodeCompiler/NewCodeSubmission.handler
    events:
      - http:
          path: compile/submission/batch
          method: post
          cors: true

  getCourseById:
    handler: Courses/GetCourseById.handler
    events:
      - http:
          path: courses/{id}
          method: get
          cors: true

  getAllCourses:
    handler: Courses/GetAllCourses.handler
    events:
      - http:
          path: courses/
          method: get
          cors: true

  privateAPI:
    handler: user/private.handler
    events:
      - http:
          path: user/private
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: UserPoolId

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: UserPoolClientId

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
